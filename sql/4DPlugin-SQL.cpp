/* --------------------------------------------------------------------------------
 #
 #  4DPlugin-SQL.cpp
 #	source generated by 4D Plugin Wizard
 #	Project : SQL
 #	author : miyako
 #	2025/07/16
 #  
 # --------------------------------------------------------------------------------*/

#include "4DPlugin-SQL.h"

#pragma mark -

void PluginMain(PA_long32 selector, PA_PluginParameters params) {
    
	try
	{
        switch(selector)
        {
			// --- SQL
            
			case 1 :
				SQLGetInfo(params);
				break;

        }

	}
	catch(...)
	{

	}
}

#pragma mark -

static void SQLGetInfo(PA_PluginParameters params) {

    PA_ObjectRef status = PA_CreateObject();
    
    PackagePtr pParams = (PackagePtr)params->fParameters;
    
    C_TEXT p2;
    p2.fromParamAtIndex(pParams, 1);
    CUTF8String connection;
    p2.copyUTF8String(&connection);
    
    ob_set_b(status, L"success", false);
    
    soci::session sql;
    
    try {
        
        soci::connection_parameters parameters(soci::odbc, (const char *)connection.c_str());
        PA_ObjectRef options = PA_GetObjectParameter(params, 3);
        if(options != NULL) {
            CUTF8String stringValue;
            if(ob_get_s(options, L"odbc_option_driver_complete", &stringValue)) {
                parameters.set_option(soci::odbc_option_driver_complete, (const char*)stringValue.c_str());
            }
        }
        sql.open(parameters);
        
        soci_mode_t mode = (soci_mode_t)PA_GetLongParameter(params, 2);
        std::unique_ptr<soci::transaction> tr;
        if(mode == soci_mode_transaction) {
            tr = std::make_unique<soci::transaction>(sql);
        }
        
        soci::odbc_session_backend* backend =
                static_cast<soci::odbc_session_backend*>(sql.get_backend());
    
        SQLHDBC hdbc = backend->hdbc_;
        
        SQLCHAR dbmsName[1024];
        SQLSMALLINT outlen;
        SQLRETURN ret = SQLGetInfo(hdbc, SQL_DBMS_NAME, dbmsName, sizeof(dbmsName), &outlen);
        
        if (SQL_SUCCEEDED(ret)) {
            
            ob_set_b(status, L"success", true);
            ob_set_s(status, "dbmsName", (const char *)dbmsName);
        }
        
        
        if(mode == soci_mode_transaction) {
            tr->commit();
            tr.reset(); // destroy transaction object
        }

    
    } catch (const std::exception& e) {
        ob_set_s(status, "errorMessage", e.what());
        ob_set_b(status, L"success", false);
    }
    PA_ReturnObject(params, status);
}

